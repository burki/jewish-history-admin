<?php
/*
 * local.inc.php-dist
 *
 * Copy to local.inc.php and adjust passwords and paths
 *
 * machine dependent stuff like hardwired paths, db-logins and passwords
 *
 * (c) 2008-2019 daniel.burckhardt@sur-gmbh.ch
 *
 * Version: 2019-02-14 dbu
 *
 * Changes:
 */

define('LIB_PATH', realpath(__DIR__ . '/../lib/') . '/');
define('VENDOR_PATH', realpath(__DIR__ . '/../lib/') . '/');

// we install through composer.json
require_once VENDOR_PATH . 'autoload.php';

define('BASE_PATH', '/admin/');
define('BASE_FILEPATH', dirname($_SERVER['SCRIPT_FILENAME']) . '/');

// define('UPLOAD_MAX_FILE_SIZE', 10240000); // go to max
define('UPLOAD_URLROOT', BASE_PATH . 'uploads/');
define('UPLOAD_FILEROOT', BASE_FILEPATH . 'uploads/');
define('UPLOAD_PATH2MAGICK', '/usr/bin/');

define('JAVA', '/usr/bin/java');

$URL_REWRITE = []; // no rewrite rules

define('OUTPUT_COMPRESS', false); // set to true to use output compression

// define('SMTP_HOST', 'smtp.host.com');
// define('SMTP_USERNAME', 'smtp@smtp.host.com');
// define('SMTP_PASSWORD', 'SECRET');
// define('SMTP_ENCRYPTION', 'ssl');
// define('SMTP_PORT', 465);

define('MAIL_SEND', true); // only do actual mailings if this is set to true

$AUTH_METHODS = [
  'AUTH_LOCAL' => true,                    // authenticate through form against local db
  // 'AUTH_FORCE' => 'USER'                // force fixed user
  // 'AUTH_ANONYMOUS' => true,             // browse anonymously
];

// define a database-connection class
require LIB_PATH . 'db_mysql.php';

class DB extends DB_Sql
{
  var $Host     = "127.0.0.1";
  var $Database = "jgo_admin";
  var $User     = "jgo_admin";
  var $Password = "SECRET";
  var $Charset  = "utf8";
  var $Select_Before_Query = true;

  var $repair = []; // Only one repair per table so we don't fall into a loop

  function last_insert_id() {
    return mysql_insert_id($this->Link_ID);
  }

  /* public: string escaping. */
  function escape_string($str) {
    return $this->connect()
      ? @mysql_real_escape_string($str, $this->Link_ID) // try to use link_id because of charset-issues: http://shiflett.org/archive/184
      : @mysql_real_escape_string($str);
  }

  // try to catch index-corruption
  function halt($msg) {
    $this->Error = @mysql_error($this->Link_ID);
    $this->Errno = @mysql_errno($this->Link_ID);
    if ($this->Errno == 1034) {
      if (preg_match("/Incorrect key file for table: '([^']+)'. Try to repair it/", $this->Error, $matches)) {
        $table = $matches[1];
        if (!$this->repair[$table]) {
          $this->repair[$table] = true;
          $ignore_user_abort = ignore_user_abort(1); // no one should stop this
          set_time_limit(300); // give this 5 minutes
          $querystr = "REPAIR TABLE $table EXTENDED";
          $this->query($querystr);
          $success = false;
          while ($this->next_record()) {
            if ($this->Record['Msg_type'] == 'status' && $this->Record['Msg_text'] == 'OK') {
              $success = true;
            }
          }
          if (!$ignore_user_abort) {
            ignore_user_abort($ignore_user_abort); // turn it back on
          }
          if ($success) {
            // Run this query again
            $querystr = preg_replace('/^Database error: Invalid SQL:/', '', $msg);
            $this->query($querystr);
            return;
          }
        }
      }
    }

    if ($this->Halt_On_Error == "no") {
      return;
    }

    $this->haltmsg($msg);

    if ($this->Halt_On_Error != "report") {
      die("Session halted.");
    }
  } // halt
}

class DB_Presentation
extends DB
{
  var $Database = "jgo_presentation";
  var $User     = "jgo_presentation";
}

class ZoteroApiFactory
{
  static $apiKey = 'ZOTERO-API-KEY';

  public static function getInstance()
  {
    return new \Hedii\ZoteroApi\ZoteroApi(self::$apiKey);
  }
}
